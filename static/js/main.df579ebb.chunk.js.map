{"version":3,"sources":["utils/fetchClient.ts","components/PostsList.tsx","components/Loader/Loader.tsx","components/NewCommentForm.tsx","api/posts.ts","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","PostsList","posts","selectedPost","onPostSelected","className","map","post","id","title","type","classNames","onClick","Loader","NewCommentForm","onAddComment","postId","useState","name","setName","email","setEmail","setBody","isLoading","setIsLoading","error","setError","handleClear","addComment","trim","postService","catch","commentError","finally","onSubmit","event","preventDefault","htmlFor","placeholder","value","onChange","target","PostDetails","comments","setComments","postError","setPostError","inputAccess","setInputAccess","useEffect","deleteComment","commentId","prev","filter","comm","length","comment","href","UserSelector","users","selectedUser","onSelectUser","isOpenDropDown","setIsOpenDropDown","handleDropdownControl","dropdownRef","useRef","handleClickOutside","current","contains","document","addEventListener","removeEventListener","ref","role","user","handleUserSelect","App","setUsers","setSelectedUser","setPosts","setSelectedPost","userId","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.df579ebb.chunk.js","sourcesContent":["const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[];\n  selectedPost: Post | null;\n  onPostSelected: (post: Post | null) => void;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  selectedPost,\n  onPostSelected,\n}) => {\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map((post) => (\n            <tr key={post.id} data-cy=\"Post\">\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">{post.title}</td>\n\n              <td className=\"has-text-right is-vcentered\">\n                {selectedPost?.id !== post.id ? (\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className={classNames('button is-link', {\n                      'is-light': selectedPost?.id !== post.id,\n                    })}\n                    onClick={() => onPostSelected(post)}\n                  >\n                    Open\n                  </button>\n                ) : (\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className=\"button is-link\"\n                    onClick={() => onPostSelected(null)}\n                  >\n                    Close\n                  </button>\n                )}\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\n\nimport * as postService from '../api/posts';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  onAddComment: (comment: Comment) => void,\n  postId: number,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ onAddComment, postId }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(false);\n\n  const handleClear = () => {\n    setError(false);\n    setBody('');\n  };\n\n  const addComment = () => {\n    if ((!name.trim()) || (!email.trim()) || (!body.trim())) {\n      setError(true);\n\n      return;\n    }\n\n    setIsLoading(true);\n\n    const newComment = {\n      postId,\n      name: name.trim(),\n      email: email.trim(),\n      body: body.trim(),\n    };\n\n    postService.addComment(newComment)\n      .then(onAddComment)\n      .then(() => handleClear())\n      .catch((commentError) => {\n        throw commentError;\n      })\n      .finally(() => setIsLoading(false));\n  };\n\n  const handleSubmitForm = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    addComment();\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\" onSubmit={handleSubmitForm}>\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            value={name}\n            onChange={(event) => setName(event.target.value)}\n            className={classNames('input', {\n              'is-danger': (error && !name.trim()),\n            })}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {(error && !name.trim()) && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {(error && !name.trim()) && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"email\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            value={email}\n            onChange={(event) => setEmail(event.target.value)}\n            className={classNames('input', {\n              'is-danger': (error && !email.trim()),\n            })}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {(error && !email.trim()) && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {(error && !email.trim()) && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            value={body}\n            onChange={(event) => setBody(event.target.value)}\n            className={classNames('textarea', {\n              'is-danger': (error && !body.trim() && !isLoading),\n            })}\n          />\n        </div>\n\n        {(error && !body.trim() && !isLoading) && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('button is-link', {\n              'is-loading': isLoading,\n            })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleClear}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport function deleteComment(commentId: number) {\n  return client.delete(`/comments/${commentId}`);\n}\n\nexport function addComment({\n  postId, name, email, body,\n}: Omit<Comment, 'id'>) {\n  return client.post<Comment>('/comments', {\n    postId, name, email, body,\n  });\n}\n","import React, { useEffect, useState } from 'react';\nimport * as postService from '../api/posts';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  post: Post;\n};\n\nexport const PostDetails: React.FC<Props> = ({ post }) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [postError, setPostError] = useState(false);\n  const [inputAccess, setInputAccess] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n    setInputAccess(false);\n\n    postService.getComments(post.id)\n      .then(setComments)\n      .catch(() => setPostError(true))\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, [post]);\n\n  const deleteComment = (commentId: number) => {\n    setComments(prev => prev.filter(comm => comm.id !== commentId));\n\n    postService.deleteComment(commentId)\n      .catch(() => setPostError(true));\n  };\n\n  const onAddComment = (comment: Comment) => {\n    setComments(prev => [...prev, comment]);\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${post.id}: ${post.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {post.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoading && (<Loader />)}\n\n          {!isLoading && postError && (\n            <div\n              className=\"notification is-danger\"\n              data-cy=\"CommentsError\"\n            >\n              Something went wrong\n            </div>\n          )}\n\n          {(!comments.length && !isLoading && !inputAccess && !postError) && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {(comments.length !== 0 && !isLoading) && (\n            <>\n              {!postError && (<p className=\"title is-4\">Comments:</p>)}\n\n              {!postError && comments.map(comment => (\n                <article\n                  key={comment.id}\n                  className=\"message is-small\"\n                  data-cy=\"Comment\"\n                >\n                  <div className=\"message-header\">\n                    <a\n                      href={`mailto:${comment.email}`}\n                      data-cy=\"CommentAuthor\"\n                    >\n                      {comment.name}\n                    </a>\n\n                    <button\n                      data-cy=\"CommentDelete\"\n                      type=\"button\"\n                      className=\"delete is-small\"\n                      aria-label=\"delete\"\n                      onClick={() => deleteComment(comment.id)}\n                    >\n                      delete button\n                    </button>\n                  </div>\n\n                  <div className=\"message-body\" data-cy=\"CommentBody\">\n                    {comment.body}\n                  </div>\n                </article>\n              )) }\n            </>\n          )}\n\n          {!isLoading && !inputAccess && !postError && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={() => setInputAccess(true)}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {inputAccess && (\n          <NewCommentForm\n            postId={post.id}\n            onAddComment={onAddComment}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useRef, useState } from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[];\n  selectedUser: User | null;\n  onSelectUser: (user: User) => void;\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  selectedUser,\n  onSelectUser,\n}) => {\n  const [isOpenDropDown, setIsOpenDropDown] = useState(false);\n\n  const handleDropdownControl = () => setIsOpenDropDown(!isOpenDropDown);\n  const dropdownRef = useRef<HTMLDivElement>(null);\n\n  const handleUserSelect = (user: User) => {\n    onSelectUser(user);\n    handleDropdownControl();\n  };\n\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (\n        dropdownRef.current\n          && !dropdownRef.current.contains(event.target as Node)\n      ) {\n        setIsOpenDropDown(false);\n      }\n    };\n\n    document.addEventListener('click', handleClickOutside);\n\n    return () => {\n      document.removeEventListener('click', handleClickOutside);\n    };\n  }, []);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames('dropdown', {\n        'is-active': isOpenDropDown,\n      })}\n    >\n      <div\n        ref={dropdownRef}\n        className=\"dropdown-trigger\"\n      >\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={handleDropdownControl}\n        >\n          {selectedUser === null ? (\n            <span>Choose a user</span>\n          ) : (\n            <span>{selectedUser.name}</span>\n          )}\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map((user) => {\n            return (\n              <a\n                key={user.id}\n                href={`#user-${user.id}`}\n                onClick={() => handleUserSelect(user)}\n                className={classNames('dropdown-item', {\n                  'is-active': selectedUser?.id === user.id,\n                })}\n              >\n                {user.name}\n              </a>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\nimport classNames from 'classnames';\n\nimport * as postService from './api/posts';\n\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(false);\n\n  useEffect(() => {\n    setError(false);\n\n    postService\n      .getUsers()\n      .then(setUsers)\n      .catch(() => setError(true));\n  }, []);\n\n  useEffect(() => {\n    setIsLoading(true);\n    setSelectedPost(null);\n    setPosts([]);\n\n    if (selectedUser) {\n      postService\n        .getPosts(selectedUser?.id)\n        .then(setPosts)\n        .catch(() => setError(true))\n        .finally(() => {\n          setIsLoading(false);\n        });\n    }\n  }, [selectedUser]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  selectedUser={selectedUser}\n                  onSelectUser={setSelectedUser}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">No user selected</p>\n                )}\n\n                {selectedUser && isLoading && <Loader />}\n\n                {!isLoading && error && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {!isLoading && !posts.length && selectedUser && !error && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                )}\n\n                {posts.length !== 0 && !isLoading && !error && (\n                  <PostsList\n                    posts={posts}\n                    selectedPost={selectedPost}\n                    onPostSelected={setSelectedPost}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': selectedPost !== null },\n            )}\n          >\n            {selectedPost && (\n              <div className=\"tile is-child box is-success \">\n                <PostDetails post={selectedPost} />\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}